{"version":3,"sources":["file:///D:/Desktop/cocosProject/SlotBar/assets/slotBar/scripts/controllers/SlotController.ts"],"names":["_decorator","assetManager","Component","SpriteFrame","Texture2D","EventBus","soltEventTypes","MockData","WebSocketService","ccclass","property","SlotController","symbolDataList","spinCompletedCount","onEnable","slotBarEventBus","on","SpinStart","onSpinStart","AllReelsFinished","onAllReelsFinished","onDisable","off","start","data","getMockSymbolData","preloadAllSymbols","connectWebSocket","emit","InitReel","error","console","msg","log","event","FetchResult","spinStart","symbols","loadedCount","Promise","resolve","reject","forEach","symbol","loadRemote","imageUrl","err","imageAsset","texture","image","spriteFrame","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,S,OAAAA,S;AAAuBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,S,OAAAA,S;;AAC/DC,MAAAA,Q;;AACCC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,Q,iBAAAA,Q;;AAEAC,MAAAA,gB,iBAAAA,gB;;;;;;;;;OAEF;AAACC,QAAAA,OAAD;AAAUC,QAAAA;AAAV,O,GAAsBV,U;;gCAGfW,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCT,SADpC,CAC8C;AAAA;AAAA;AAAA,eAClCU,cADkC,GACH,EADG;AAAA,eAGlCC,kBAHkC,GAGb,CAHa;AAAA;;AAGV;AAEhCC,QAAAA,QAAQ,GAAG;AACP;AAAA;AAAA,oCAASC,eAAT,CAAyBC,EAAzB,CAA4B;AAAA;AAAA,gDAAeC,SAA3C,EAAsD,KAAKC,WAA3D,EAAwE,IAAxE,EADO,CACwE;;AAC/E;AAAA;AAAA,oCAASH,eAAT,CAAyBC,EAAzB,CAA4B;AAAA;AAAA,gDAAeG,gBAA3C,EAA6D,KAAKC,kBAAlE,EAAsF,IAAtF,EAFO,CAEsF;AAChG;;AAEDC,QAAAA,SAAS,GAAG;AACR;AAAA;AAAA,oCAASN,eAAT,CAAyBO,GAAzB,CAA6B;AAAA;AAAA,gDAAeL,SAA5C,EAAuD,KAAKC,WAA5D,EAAyE,IAAzE,EADQ,CACwE;;AAChF;AAAA;AAAA,oCAASH,eAAT,CAAyBO,GAAzB,CAA6B;AAAA;AAAA,gDAAeH,gBAA5C,EAA8D,KAAKC,kBAAnE,EAAuF,IAAvF,EAFQ,CAEsF;AACjG;;AAEKG,QAAAA,KAAK,GAAG;AAAA;;AAAA;AACV,gBAAI;AACA,kBAAIC,IAAJ,CADA,CAEA;;AACAA,cAAAA,IAAI,GAAG;AAAA;AAAA,wCAASC,iBAAT,EAAP,CAHA,CAIA;AACA;;AAEA,cAAA,KAAI,CAACb,cAAL,GAAsBY,IAAtB;AACA,oBAAM,KAAI,CAACE,iBAAL,CAAuB,KAAI,CAACd,cAA5B,CAAN;AAEA,oBAAM,KAAI,CAACe,gBAAL,EAAN;AAEA;AAAA;AAAA,wCAASZ,eAAT,CAAyBa,IAAzB,CAA8B;AAAA;AAAA,oDAAeC,QAA7C,EAAuDL,IAAvD,EAZA,CAY8D;AACjE,aAbD,CAaE,OAAOM,KAAP,EAAc;AACZC,cAAAA,OAAO,CAACD,KAAR,CAAc,oBAAd,EAAoCA,KAApC;AACH;AAhBS;AAiBb;;AAEaH,QAAAA,gBAAgB,GAAG;AAAA;AAC7B;AAAA;AAAA,sDAAiBA,gBAAjB,iCAAkC,WAAOK,GAAP,EAAoB;AAClDD,cAAAA,OAAO,CAACE,GAAR,CAAY,YAAZ,EAA0BD,GAA1B,EADkD,CAGlD;;AACA,kBAAIA,GAAG,CAACE,KAAJ,KAAc,YAAlB,EAAgC;AAC5B;AACA;AACA;AAAA;AAAA,0CAASnB,eAAT,CAAyBa,IAAzB,CAA8B;AAAA;AAAA,sDAAeO,WAA7C,EAA0DH,GAAG,CAACR,IAA9D,EAH4B,CAI5B;AACH;AACJ,aAVD;AAD6B;AAYhC;;AAEaN,QAAAA,WAAW,GAAG;AAAA;AACxB;AAAA;AAAA,sDAAiBkB,SAAjB,CAA2B,EAA3B;AADwB;AAE3B;;AAEahB,QAAAA,kBAAkB,GAAG,CAC/B;;AAD+B;AAElC,SAtDyC,CAwD1C;;;AACAM,QAAAA,iBAAiB,CAACW,OAAD,EAAuC;AACpD,cAAIC,WAAW,GAAG,CAAlB;AACA,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCJ,YAAAA,OAAO,CAACK,OAAR,CAAiBC,MAAD,IAAY;AACxB1C,cAAAA,YAAY,CAAC2C,UAAb,CAAwBD,MAAM,CAACE,QAA/B,EAAyC,CAACC,GAAD,EAAMC,UAAN,KAAiC;AACtE,oBAAID,GAAJ,EAAS;AACLL,kBAAAA,MAAM,CAACK,GAAD,CAAN;AACA;AACH;;AAED,oBAAME,OAAO,GAAG,IAAI5C,SAAJ,EAAhB;AACA4C,gBAAAA,OAAO,CAACC,KAAR,GAAgBF,UAAhB;AAEA,oBAAMG,WAAW,GAAG,IAAI/C,WAAJ,EAApB;AACA+C,gBAAAA,WAAW,CAACF,OAAZ,GAAsBA,OAAtB;AAEAL,gBAAAA,MAAM,CAACO,WAAP,GAAqBA,WAArB;AAEAZ,gBAAAA,WAAW;;AACX,oBAAIA,WAAW,KAAKD,OAAO,CAACc,MAA5B,EAAoC;AAChCX,kBAAAA,OAAO;AACV;AACJ,eAlBD;AAmBH,aApBD;AAqBH,WAtBM,CAAP;AAuBH;;AAlFyC,O","sourcesContent":["import {_decorator, assetManager, Component, ImageAsset, SpriteFrame, Texture2D} from 'cc';\r\nimport EventBus from '../eventSystem/EventCenter';\r\nimport {soltEventTypes} from '../eventSystem/EventTypes';\r\nimport {MockData} from '../mockData/MockData';\r\nimport {SymbolData} from '../types/SymbolData';\r\nimport {WebSocketService} from \"db://assets/slotBar/scripts/services/WebSocketService\";\r\n\r\nconst {ccclass, property} = _decorator;\r\n\r\n@ccclass('SlotController')\r\nexport class SlotController extends Component {\r\n    private symbolDataList: SymbolData[] = [];\r\n\r\n    private spinCompletedCount = 0; // 用來記錄完成幾個滾輪\r\n\r\n    onEnable() {\r\n        EventBus.slotBarEventBus.on(soltEventTypes.SpinStart, this.onSpinStart, this); // 註冊事件-開始旋轉\r\n        EventBus.slotBarEventBus.on(soltEventTypes.AllReelsFinished, this.onAllReelsFinished, this); // 註冊事件-所有滾輪完成\r\n    }\r\n\r\n    onDisable() {\r\n        EventBus.slotBarEventBus.off(soltEventTypes.SpinStart, this.onSpinStart, this); // 取消註冊事件-開始旋轉\r\n        EventBus.slotBarEventBus.off(soltEventTypes.AllReelsFinished, this.onAllReelsFinished, this); // 取消註冊事件-所有滾輪完成\r\n    }\r\n\r\n    async start() {\r\n        try {\r\n            let data: SymbolData[];\r\n            // 使用mock資料\r\n            data = MockData.getMockSymbolData();\r\n            // 向伺服器打api拿SymbolData\r\n            // data = await ApiService.fetchSymbolData();\r\n\r\n            this.symbolDataList = data;\r\n            await this.preloadAllSymbols(this.symbolDataList);\r\n\r\n            await this.connectWebSocket();\r\n\r\n            EventBus.slotBarEventBus.emit(soltEventTypes.InitReel, data); // 發送事件，通知SymbolData已經載入完成\r\n        } catch (error) {\r\n            console.error('讀取載入圖片失敗或token有問題:', error);\r\n        }\r\n    }\r\n\r\n    private async connectWebSocket() {\r\n        WebSocketService.connectWebSocket(async (msg: any) => {\r\n            console.log(\"📩 收到後端訊息：\", msg);\r\n\r\n            // 假設收到的是 spin 結果\r\n            if (msg.event === \"SpinResult\") {\r\n                // 呼叫對應方法處理\r\n                // const results: string[] = (msg.data.result as any[]).map(item => String(item));\r\n                EventBus.slotBarEventBus.emit(soltEventTypes.FetchResult, msg.data);\r\n                // EventBus.slotBarEventBus.emit(soltEventTypes.UpdateCoinText, msg.data.balance);\r\n            }\r\n        });\r\n    }\r\n\r\n    private async onSpinStart() {\r\n        WebSocketService.spinStart(10);\r\n    }\r\n\r\n    private async onAllReelsFinished() {\r\n        // 將資料存進後端\r\n    }\r\n\r\n    // 預載入所有符號圖片 (這裡還可以拆出去modle做操作)\r\n    preloadAllSymbols(symbols: SymbolData[]): Promise<void> {\r\n        let loadedCount = 0;\r\n        return new Promise((resolve, reject) => {\r\n            symbols.forEach((symbol) => {\r\n                assetManager.loadRemote(symbol.imageUrl, (err, imageAsset: ImageAsset) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                        return;\r\n                    }\r\n\r\n                    const texture = new Texture2D();\r\n                    texture.image = imageAsset;\r\n\r\n                    const spriteFrame = new SpriteFrame();\r\n                    spriteFrame.texture = texture;\r\n\r\n                    symbol.spriteFrame = spriteFrame;\r\n\r\n                    loadedCount++;\r\n                    if (loadedCount === symbols.length) {\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n}"]}