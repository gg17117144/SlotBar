{"version":3,"sources":["file:///D:/Desktop/cocosProject/SlotBar/assets/slotBar/scripts/services/ApiService.ts"],"names":["ApiService","ServiceBase","register","username","password","email","response","fetch","API_BASE","method","headers","body","JSON","stringify","ok","errorData","json","catch","message","status","success","error","login","console","log","data","token","getMe","Error"],"mappings":"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","sourcesContent":["// assets/scripts/services/ApiService.ts\r\nimport {ServiceBase} from \"db://assets/slotBar/scripts/services/ServiceBase\";\r\n\r\nexport class ApiService {\r\n    // 註冊\r\n    static async register(username: string, password: string, email: string): Promise<{\r\n        success: boolean;\r\n        message?: string\r\n    }> {\r\n        try {\r\n            const response = await fetch(`${ServiceBase.API_BASE}/register`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({username, password, email})\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => null); // 解析失敗也不會爆\r\n                const message = errorData?.message || `註冊失敗：${response.status}`;\r\n                return {success: false, message};\r\n            }\r\n\r\n            return {success: true};\r\n        } catch (error: any) {\r\n            return {success: false, message: error.message || '網路錯誤，請稍後再試'};\r\n        }\r\n    }\r\n\r\n    // 登入並儲存 token\r\n    static async login(username: string, password: string): Promise<{ success: boolean; message?: string }> {\r\n        try {\r\n            const response = await fetch(`${ServiceBase.API_BASE}/login`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({username, password})\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => null); // 解析失敗也不會爆\r\n                const message = errorData?.message || `登入失敗：${response.status}`;\r\n                return {success: false, message};\r\n            }\r\n            const json = await response.json();\r\n            console.log(\"取得token成功：\", json.data.token);\r\n            ServiceBase.token = json.data.token;\r\n            return {success: true};\r\n        } catch (error: any) {\r\n            return {success: false, message: error.message || '網路錯誤，請稍後再試'};\r\n        }\r\n    }\r\n\r\n    // 拿目前登入的使用者資訊\r\n    static async getMe(): Promise<any> {\r\n        if (!ServiceBase.token) throw new Error(\"尚未登入\");\r\n\r\n        const response = await fetch(`${ServiceBase.API_BASE}/me`, {\r\n            headers: {'Authorization': `Bearer ${ServiceBase.token}`}\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`取得使用者資訊失敗：${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    }\r\n}"]}