{"version":3,"sources":["file:///D:/Desktop/cocosProject/SlotBar/assets/slotBar/scripts/views/ReelSlot.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Sprite","tween","ccclass","property","ReelSlot","Number","itemHeight","symbolNodes","symbolDataList","currentOffset","isSpinning","onSpinEnd","initReel","symbols","currentSymbolIndex","Math","floor","length","contentNode","removeAllChildren","i","item","reelItemPrefab","sprite","getComponentInChildren","spriteFrame","setPosition","addChild","push","reverse","updateVisibleSymbols","console","log","index","type","count","halfRange","totalHeight","baseY","newY","spinToSymbol","symbolType","spinRounds","duration","onComplete","warn","targetIndex","findIndex","s","currentIndex","steps","endOffset","offset","to","onUpdate","target","start"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Sprite, tween } from 'cc';\r\nimport { SymbolData } from '../types/SymbolData';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ReelView')\r\nexport class ReelSlot extends Component {\r\n    @property(Prefab)\r\n    reelItemPrefab: Prefab = null;\r\n\r\n    @property(Node)\r\n    contentNode: Node = null;\r\n\r\n    private itemHeight = 100;\r\n    private symbolNodes: Node[] = [];\r\n    private symbolDataList: SymbolData[] = [];\r\n\r\n    private currentOffset = 0; // 用來做整體偏移的值，但只會影響 reelItem\r\n    @property(Number)\r\n    private currentSymbolIndex = 0;\r\n\r\n    private isSpinning = false;\r\n    private onSpinEnd: Function | null = null;\r\n\r\n    initReel(symbols: SymbolData[]) {\r\n        this.symbolDataList = symbols;\r\n        this.currentSymbolIndex = Math.floor(symbols.length / 2)\r\n        this.currentOffset = 0;\r\n        this.contentNode.removeAllChildren();\r\n        this.symbolNodes = [];\r\n\r\n        for (let i = 0; i < symbols.length; i++) {\r\n            const item = instantiate(this.reelItemPrefab);\r\n            const sprite = item.getComponentInChildren(Sprite);\r\n            if (sprite && symbols[i].spriteFrame) {\r\n                sprite.spriteFrame = symbols[i].spriteFrame;\r\n            }\r\n            // 不用設定 y，初始化為0，之後靠 updateVisibleSymbols() 控制位置\r\n            item.setPosition(0, 0);\r\n            this.contentNode.addChild(item);\r\n            this.symbolNodes.push(item);\r\n        }\r\n\r\n        // contentNode 固定位置\r\n        this.contentNode.setPosition(0, 0);\r\n        // 初始化時，將符號類型順序反轉\r\n        this.symbolNodes.reverse();\r\n        // this.symbolDataList.reverse();\r\n        // 更新可見符號位置\r\n        this.updateVisibleSymbols();\r\n        console.log('符號類型順序');\r\n        for (let index = 0; index < this.symbolDataList.length; index++) {\r\n            console.log('符號類型:', this.symbolDataList[index].type);\r\n        }\r\n        console.log('現在的符號類型:', this.symbolDataList[this.currentSymbolIndex].type);\r\n    }\r\n\r\n    private updateVisibleSymbols() {\r\n        const count = this.symbolNodes.length;\r\n        const halfRange = (count - 1) / 2 * this.itemHeight;  // 200\r\n\r\n        const totalHeight = count * this.itemHeight; // 500\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const item = this.symbolNodes[i];\r\n\r\n            // 基準位置：中心對齊，從 200 到 -200\r\n            let baseY = halfRange - i * this.itemHeight;  // 200,100,0,-100,-200 (依照5張圖片為範例)\r\n\r\n            // 讓圖片往下滾動\r\n            let newY = baseY - this.currentOffset;\r\n\r\n            // 位置循環維持在 [-halfRange, halfRange]\r\n            while (newY < -halfRange) {\r\n                newY += totalHeight;\r\n            }\r\n            while (newY > halfRange) {\r\n                newY -= totalHeight;\r\n            }\r\n\r\n            item.setPosition(0, newY);\r\n        }\r\n    }\r\n\r\n\r\n    spinToSymbol(symbolType: string, spinRounds: number, duration: number = 0.5, onComplete?: Function) {\r\n        // console.log('當前符號資料:', this.symbolDataList.map(s => s.type));\r\n        if (this.isSpinning) {\r\n            console.warn(\"正在轉動中，請稍後\");\r\n            return;\r\n        }\r\n\r\n        const targetIndex = this.symbolDataList.findIndex(s => s.type === symbolType);\r\n        if (targetIndex === -1) {\r\n            console.warn(\"找不到指定的符號:\", symbolType);\r\n            return;\r\n        }\r\n\r\n        this.isSpinning = true;\r\n        this.onSpinEnd = onComplete || null;\r\n        // 計算目標索引與當前索引之間的距離\r\n        const currentIndex = this.currentSymbolIndex;\r\n        // 計算步數\r\n        let steps = (targetIndex - currentIndex + this.symbolDataList.length) % this.symbolDataList.length;\r\n        if (steps === 0) steps = this.symbolDataList.length;\r\n        // 計算加上亂數的總步數\r\n        steps = spinRounds * this.symbolDataList.length + steps;\r\n        const endOffset = this.currentOffset + steps * this.itemHeight;\r\n        // 總時間 = 單次時間 * 步數\r\n        duration = duration * spinRounds; \r\n        // console.log(`開始滑動到符號: ${symbolType}, 目標索引: ${this.symbolDataList[targetIndex].type}, 當前索引: ${this.symbolDataList[currentIndex].type}, 滾動步數: ${steps}, 結束偏移: ${endOffset}`);\r\n        tween({ offset: this.currentOffset })\r\n            .to(duration, { offset: endOffset }, {\r\n                onUpdate: (target) => {\r\n                    this.currentOffset = target.offset;\r\n                    this.updateVisibleSymbols();\r\n                },\r\n                onComplete: () => {\r\n                    // 迴圈歸正偏移值\r\n                    const totalHeight = this.symbolDataList.length * this.itemHeight;\r\n                    this.currentOffset = this.currentOffset % totalHeight;\r\n                    this.currentSymbolIndex = targetIndex;\r\n                    this.isSpinning = false;\r\n                    if (this.onSpinEnd) this.onSpinEnd();\r\n                    console.log(\"完成滑動到符號:\", symbolType);\r\n                }\r\n            })\r\n            .start();\r\n    }\r\n}\r\n"]}