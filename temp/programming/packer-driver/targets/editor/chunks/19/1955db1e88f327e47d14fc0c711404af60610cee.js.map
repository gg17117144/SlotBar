{"version":3,"sources":["file:///D:/Desktop/cocosProject/SlotBar/assets/slotBar/scripts/services/WebSocketService.ts"],"names":["WebSocketService","ServiceBase","EventBus","tipTextEventTypes","connectWebSocket","onMessage","socket","WebSocket","Websocket_BASE","token","onopen","tipTextEventBus","emit","ShowTipText","text","console","log","onmessage","event","msg","JSON","parse","data","onerror","e","error","onclose","spinStart","bet","readyState","OPEN","Error","payload","send","stringify"],"mappings":";;;wEAIaA,gB;;;;;;;;;;;;;;;;;;;;;;AAJLC,MAAAA,W,iBAAAA,W;;AACDC,MAAAA,Q;;AACCC,MAAAA,iB,iBAAAA,iB;;;;;;;kCAEKH,gB,GAAN,MAAMA,gBAAN,CAAuB;AAG1B;AACuB,eAAhBI,gBAAgB,CAACC,SAAD,EAAsC;AACzD,eAAKC,MAAL,GAAc,IAAIC,SAAJ,CAAe,GAAE;AAAA;AAAA,0CAAYC,cAAe,UAAS;AAAA;AAAA,0CAAYC,KAAM,EAAvE,CAAd;;AAEA,eAAKH,MAAL,CAAYI,MAAZ,GAAqB,MAAM;AACvB;AAAA;AAAA,sCAASC,eAAT,CAAyBC,IAAzB,CAA8B;AAAA;AAAA,wDAAkBC,WAAhD,EAA6D;AAACC,cAAAA,IAAI,EAAE;AAAP,aAA7D;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH,WAHD;;AAKA,eAAKV,MAAL,CAAYW,SAAZ,GAAyBC,KAAD,IAAW;AAC/B,kBAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,IAAjB,CAAZ;AACAjB,YAAAA,SAAS,CAACc,GAAD,CAAT,CAF+B,CAEf;AACnB,WAHD;;AAKA,eAAKb,MAAL,CAAYiB,OAAZ,GAAuBC,CAAD,IAAO;AACzB;AAAA;AAAA,sCAASb,eAAT,CAAyBC,IAAzB,CAA8B;AAAA;AAAA,wDAAkBC,WAAhD,EAA6D;AAACC,cAAAA,IAAI,EAAE;AAAP,aAA7D;AACAC,YAAAA,OAAO,CAACU,KAAR,CAAc,cAAd,EAA8BD,CAA9B;AACH,WAHD;;AAKA,eAAKlB,MAAL,CAAYoB,OAAZ,GAAsB,MAAM;AACxB;AAAA;AAAA,sCAASf,eAAT,CAAyBC,IAAzB,CAA8B;AAAA;AAAA,wDAAkBC,WAAhD,EAA6D;AAACC,cAAAA,IAAI,EAAE;AAAP,aAA7D;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,WAHD;AAIH,SA1ByB,CA4B1B;;;AACgB,eAATW,SAAS,CAACC,GAAD,EAAoB;AAChC,cAAI,CAAC,KAAKtB,MAAN,IAAgB,KAAKA,MAAL,CAAYuB,UAAZ,KAA2BtB,SAAS,CAACuB,IAAzD,EAA+D;AAC3D,kBAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACH;;AAED,gBAAMC,OAAO,GAAG;AACZd,YAAAA,KAAK,EAAE,WADK;AAEZI,YAAAA,IAAI,EAAE;AAACM,cAAAA;AAAD;AAFM,WAAhB;AAKA,eAAKtB,MAAL,CAAY2B,IAAZ,CAAiBb,IAAI,CAACc,SAAL,CAAeF,OAAf,CAAjB;AACH;;AAxCyB,O;;AAAjBhC,MAAAA,gB,CACMM,M,GAA2B,I","sourcesContent":["import {ServiceBase} from \"db://assets/slotBar/scripts/services/ServiceBase\";\r\nimport EventBus from \"db://assets/slotBar/scripts/eventSystem/EventCenter\";\r\nimport {tipTextEventTypes} from \"db://assets/slotBar/scripts/eventSystem/EventTypes\";\r\n\r\nexport class WebSocketService {\r\n    private static socket: WebSocket | null = null;\r\n\r\n    // 建立 WebSocket 連線\r\n    static connectWebSocket(onMessage: (msg: any) => void): void {\r\n        this.socket = new WebSocket(`${ServiceBase.Websocket_BASE}?token=${ServiceBase.token}`);\r\n\r\n        this.socket.onopen = () => {\r\n            EventBus.tipTextEventBus.emit(tipTextEventTypes.ShowTipText, {text: \"✅ WebSocket 已連線\"});\r\n            console.log(\"✅ WebSocket 已連線\");\r\n        };\r\n\r\n        this.socket.onmessage = (event) => {\r\n            const msg = JSON.parse(event.data);\r\n            onMessage(msg); // 交給外部處理\r\n        };\r\n\r\n        this.socket.onerror = (e) => {\r\n            EventBus.tipTextEventBus.emit(tipTextEventTypes.ShowTipText, {text: \"WebSocket 錯誤\"});\r\n            console.error(\"WebSocket 錯誤\", e);\r\n        };\r\n\r\n        this.socket.onclose = () => {\r\n            EventBus.tipTextEventBus.emit(tipTextEventTypes.ShowTipText, {text: \"WebSocket 已關閉\"});\r\n            console.log(\"WebSocket 已關閉\");\r\n        };\r\n    }\r\n\r\n    // 發送 SpinStart 資料\r\n    static spinStart(bet: number): void {\r\n        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\r\n            throw new Error(\"WebSocket 尚未連線\");\r\n        }\r\n\r\n        const payload = {\r\n            event: \"SpinStart\",\r\n            data: {bet}\r\n        };\r\n\r\n        this.socket.send(JSON.stringify(payload));\r\n    }\r\n}\r\n"]}